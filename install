#! /usr/bin/python3

import os

root = os.path.abspath(os.path.dirname(__file__))


config = """
# MANAGED BY ROS WORKSPACE SWITCHER >>
# Everything in this block can be deleted without prior notice
# Create alias for ROS workspace switcher if it exists
if [ -f {root}/bin/workspace.bash ]; then
    alias workspace='source {root}/bin/workspace.bash'
fi
# Set completion of workspace script
if [ -f {root}/completion/workspace_comp.py ]; then
    complete -C {root}/completion/workspace_comp.py workspace
fi
# << MANAGED BY ROS WORKSPACE SWITCHER
""".format(root=root)

bashrc_path = os.path.join(os.getenv('HOME'), '.bashrc')

with open(bashrc_path, 'r') as f:
    lines = f.read().split('\n')

start = end = None

# TODO If multiple are found, what happens then?
for i, line in enumerate(lines):
    if "MANAGED BY ROS WORKSPACE SWITCHER >>" in line:
        start = i
    if "<< MANAGED BY ROS WORKSPACE SWITCHER" in line:
        end = i + 1

if (start is None) ^ (end is None):
    wrn_str = ("Warning: {} line of the ROS workspace switcher "
               "configuration block is not found in the .bashrc file, but the "
               "{} line is found. This might lead to unexpected behaviour. "
               "Please remove the remainder of the configuration block "
               "manually, it can be found around line {}.")
    if start is None:
        print(wrn_str.format('starting', 'end', end + 1))
    if end is None:
        print(wrn_str.format('end', 'starting', start + 1))

if start is not None and end is not None:

    rws_config = lines[start:end]
    del lines[start:end]
    # This weird contraption reduces the number of blank lines when
    # the configuration block is removed.
    start -= 1
    while not lines[start]:
        start -= 1
        if start < 0:
            break
    end = start + 1
    while not lines[end]:
        end += 1
        if end == len(lines):
            break
    del lines[start+1:end]
    lines.insert(start+1, '')

# Remove trailing blank lines from .bashrc
while not lines[-1]:
    del lines[-1]

# Write content back to .bashrc
with open(bashrc_path, 'w+') as f:
    f.write('\n'.join(lines) + '\n' + config)
